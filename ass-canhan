#include <stdio.h>
void cls(){
	system("@cls||clear");
} 
typedef struct {
  char name[50];
  float price;
} IceCream;

typedef struct {
  int id;
  char name[50];
  IceCream order[10]; // Array to hold ordered ice cream items (max 10)
  int numItems; // Number of items ordered by the customer
} Customer;

// Function to add ice cream flavors and prices
void addIceCream(IceCream* iceCreams, int* numIceCreams) {
  if (*numIceCreams >= 10) {
    printf("Maximum ice cream flavors reached.\n");
    return;
  }

  printf("Enter ice cream name: ");
  getchar();
  gets(iceCreams[*numIceCreams].name);
  printf("Enter price: ");
  scanf("%f", &iceCreams[*numIceCreams].price);

  (*numIceCreams)++;
}

// Function to add customer details
void addCustomer(Customer* customers, int* numCustomers) {
  if (*numCustomers >= 10) {
    printf("Maximum customer capacity reached.\n");
    return;
  }

  printf("Enter customer ID: ");
  scanf("%d", &customers[*numCustomers].id);
  printf("Enter customer name: ");
  getchar();
  gets(customers[*numCustomers].name);

  customers[*numCustomers].numItems = 0; // Initialize ordered items to 0

  (*numCustomers)++;
}
int orderQuantities[10];// Separate array to store order quantities (max 10)
// Function to take customer order
void takeOrder(Customer* customer, IceCream* iceCreams, int numIceCreams) {
  int choice, quantity;
 

	int i;
  printf("Customer: %s (ID: %d)\n", customer->name, customer->id);
  printf("Available Ice Creams:\n");

  for ( i = 0; i < numIceCreams; i++) {
    printf("%d. %s (%.0fVND)\n", i + 1, iceCreams[i].name, iceCreams[i].price);
  }

  do {
    printf("Enter ice cream number (0 to finish): ");
    scanf("%d", &choice);

    if (choice > 0 && choice <= numIceCreams) {
      printf("Enter quantity: ");
      scanf("%d", &quantity);

      if (quantity > 0) {
      	customer->order[customer->numItems] = iceCreams[choice - 1];
        orderQuantities[customer->numItems] = quantity; // Store quantity in separate array
        customer->numItems++;
      } else {
        printf("Invalid quantity.\n");
      }
    } else if (choice != 0) {
      printf("Invalid ice cream number.\n");
    }
  } while (choice != 0);
}

// Function to generate invoice
void generateInvoice(Customer customer, int orderQuantities[]) {
  printf("\n\t\t  Ice Cream Shop\n");
  printf("\t\t\t  Invoice\n\n");
  printf("Customer ID: %d\n", customer.id);
  printf("Customer Name: %s\n\n", customer.name);
  int i;
  printf("Ordered Items:\n");
  printf("  %-20s  %-10s  %-10s\n", "Name", "Quantity", "Price");
  float totalCost = 0;
  for (i = 0; i < customer.numItems; i++) {
    IceCream item = customer.order[i];
    printf("  %-20s  %d  %10.0fVND\n", item.name, orderQuantities[i], item.price); // Assuming quantity 1 for simplicity
    totalCost += item.price * orderQuantities[i]; // Calculate total cost with quantity
  }
  printf("\nTotal Cost: %.0fVND\n", totalCost);
}

int main() {
  IceCream iceCreams[10];
  int numIceCreams = 0;
  Customer customers[10];
  int numCustomers = 0;
  Customer* customer;
  int choice;
  
  do {
    printf("\nIce Cream Shop Menu:\n");
    printf("1. Add Ice Cream Flavor\n");
    printf("2. Add Customer\n");
    printf("3. Take Order\n");
    printf("4. Generate Invoice\n");
    printf("5. Exit\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);
    switch (choice) {
    	case 1:
    		cls();
    		addIceCream(iceCreams, &numIceCreams);
    		break;
		case 2:
			cls();
			addCustomer(customers,&numCustomers);
			 break;
		case 3:
			cls();
			if (numCustomers > 0) {
      int customerIndex,i;
      printf("Select customer (enter ID): ");
      scanf("%d", &customerIndex);

      // Find the customer by ID (assuming unique IDs)
      Customer* selectedCustomer = NULL;
      for ( i = 0; i < numCustomers; i++) {
        if (customers[i].id == customerIndex) {
          selectedCustomer = &customers[i];
          break;
        }
      }

      if (selectedCustomer != NULL) {
        takeOrder(selectedCustomer, iceCreams, numIceCreams);
      } else {
        printf("Customer not found.\n");
      }
    } else {
      printf("No customers added yet. Please add a customer first.\n");
    }
    	break;
    case 4:
    	cls();
    	if (numCustomers > 0) {
      int customerIndex,i;
      printf("Select customer (enter ID): ");
      scanf("%d", &customerIndex);

      // Find the customer by ID (assuming unique IDs)
      Customer* selectedCustomer = NULL;
      for ( i = 0; i < numCustomers; i++) {
        if (customers[i].id == customerIndex) {
          selectedCustomer = &customers[i];
          break;
        }
      }

      if (selectedCustomer != NULL) {
        generateInvoice(*selectedCustomer, orderQuantities); // Pass by value
      } else {
        printf("Customer not found.\n");
      }
    } else 
      printf("No customers added yet. Please add a customer first.\n");
    
    break; 
		}
	}
	while(choice!=5);
}
